// (c) Electronic Arts. All Rights Reserved.

#ifndef PUBLIC_RW_COLLISION_MESHBUILDER_TRIANGLECONNECTOR_H
#define PUBLIC_RW_COLLISION_MESHBUILDER_TRIANGLECONNECTOR_H


#include <rw/collision/common.h>

#if !defined EA_PLATFORM_PS3_SPU

#include <coreallocator/icoreallocator_interface.h>

#include <rw/collision/meshbuilder/detail/containers.h>


namespace rw
{
namespace collision
{
namespace meshbuilder
{


/**
\brief Static helper class that generates adjacency information for triangles in a triangle soup.

Triangles that share pairs of adjacent vertices are tagged as neighbors of each other
on a shared edge. The adjacency information built up consists of a triple of triangle
indices stored for each triangle. The three triangle indices identify the triangles
that are neighbors on each of the three edges of the triangle respectively.
A special index value \ref CLUSTEREDMESHBUILDER_TRIANGLENEIGHBORINDEX_NOMATCH is
used to indicate unmatched edges with no adjacent triangles.

\note This is a convenience utility whose main purpose is to hide the use of
VertexTriangleMap, which is internal detail and not intended for general use.
*/
class TriangleConnector
{

public:

    typedef detail::VertexList VertexList;
    typedef detail::TriangleList TriangleList;
    typedef detail::TriangleEdgeCosinesList TriangleEdgeCosinesList;
    typedef detail::TriangleNeighborsList TriangleNeighborsList;
    typedef detail::TriangleFlagsList TriangleFlagsList;

    /**
    \brief Generates adjacency information for a collection of triangles.

    The information generated by this method consists of a collection of per-triangle
    edge cosine triples, a collection of per-triangle neighbor triangle index triples,
    and a collection of per-triangle flag triples. The information is stored in
    pre-allocated containers provided by the caller, which are expected to be
    have already been resized to the match the number of triangles in the collections.

    An allocator provided to the method is used for temporary internal allocations.
    All temporary allocations are freed before return.

    \param triangleEdgeCosines          A collection of per-triangle edge cosine triples to be filled.
    \param triangleNeighbors            A collection of per-triangle neighbor triangle index triples to be filled.
    \param triangleFlags                A collection of per-triangle flags to be filled.
    \param allocator                    An allocator to be used for temporary internal allocations.
    \param vertices                     A collection of vertices referenced by the triangle collection.
    \param triangles                    A collection of triangles whose connectivity information is to be generated.

    \return True, if the connectivity information was generated successfully.
    */
    static bool GenerateTriangleConnectivity(
        TriangleEdgeCosinesList &triangleEdgeCosines,
        TriangleNeighborsList &triangleNeighbors,
        TriangleFlagsList &triangleFlags,
        EA::Allocator::ICoreAllocator &allocator,
        const VertexList &vertices,
        const TriangleList &triangles);
};


} // namespace meshbuilder
} // namespace collision
} // namespace rw


#endif // !defined EA_PLATFORM_PS3_SPU

#endif // defined PUBLIC_RW_COLLISION_MESHBUILDER_TRIANGLECONNECTOR_H
